const {exec}           = require('child_process')
const SHA256           = require("crypto-js/sha256")
const {platform, arch} = process


const windowsSysPath = {
    ia32: `%windir%\System32`,
    x64:  `%windir%\SysWOW64`
}

const HWID = {
    win32:  `${windowsSysPath[arch]}\REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid`,
    darwin: `ioreg -rd1 -c IOPlatformExpertDevice`,
    linux:  `cat /var/lib/dbus/machine-id /etc/machine-id 2> /dev/null`
}

const getHWID = (execResult) => {

    if (!execResult) {
        throw new Error(`Cant resolve exec result`)
    }

    if (platform == `win32`) {
        return execResult
            .toString()
            .split('REG_SZ')[1]
            .replace(/\r+|\n+|\s+/ig, '')
            .toLowerCase()
    }

    if (platform == `darwin`) {
        return execResult
            .split('IOPlatformUUID')[1]
            .split("\n")[0].replace(/\=|\s+|\"/ig, '')
            .toLowerCase()
    }

    if (platform == `linux`) {
        return execResult
            .toString()
            .replace(/\r+|\n+|\s+/ig, '')
            .toLowerCase()
    }
    throw new Error(`Unknown platform`)
}

module.exports = (settings) => new Promise((resolve, reject) => {
    exec(HWID[platform], (err, stdout, stderr) => {
        if (err) {
            reject(new Error(`Error while obtaining hwid: ${err.stack}`));
        }
        const ID = getHWID(stdout.toString())
        resolve(settings.hash ? SHA256(ID).toString() : ID)
    })
})