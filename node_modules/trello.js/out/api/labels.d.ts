import * as Parameters from './parameters';
import { Client } from '../clients';
import { Callback } from '../types';
export declare class Labels {
    private client;
    constructor(client: Client);
    /** Get information about a single Label. */
    getLabel<T = unknown>(parameters: Parameters.GetLabel, callback: Callback<T>): Promise<void>;
    /** Get information about a single Label. */
    getLabel<T = unknown>(parameters: Parameters.GetLabel, callback?: never): Promise<T>;
    /** Update a label by ID. */
    updateLabel<T = unknown>(parameters: Parameters.UpdateLabel, callback: Callback<T>): Promise<void>;
    /** Update a label by ID. */
    updateLabel<T = unknown>(parameters: Parameters.UpdateLabel, callback?: never): Promise<T>;
    /** Delete a label by ID. */
    deleteLabel<T = unknown>(parameters: Parameters.DeleteLabel, callback: Callback<T>): Promise<void>;
    /** Delete a label by ID. */
    deleteLabel<T = unknown>(parameters: Parameters.DeleteLabel, callback?: never): Promise<T>;
    /** Update a field on a label. */
    updateLabelField<T = unknown>(parameters: Parameters.UpdateLabelField, callback: Callback<T>): Promise<void>;
    /** Update a field on a label. */
    updateLabelField<T = unknown>(parameters: Parameters.UpdateLabelField, callback?: never): Promise<T>;
    /** Create a new Label on a Board. */
    createLabel<T = unknown>(parameters: Parameters.CreateLabel, callback: Callback<T>): Promise<void>;
    /** Create a new Label on a Board. */
    createLabel<T = unknown>(parameters: Parameters.CreateLabel, callback?: never): Promise<T>;
}
