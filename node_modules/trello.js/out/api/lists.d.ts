import * as Models from './models';
import * as Parameters from './parameters';
import { Client } from '../clients';
import { Callback } from '../types';
export declare class Lists {
    private client;
    constructor(client: Client);
    /** Get information about a List */
    getList<T = unknown>(parameters: Parameters.GetList, callback: Callback<T>): Promise<void>;
    /** Get information about a List */
    getList<T = unknown>(parameters: Parameters.GetList, callback?: never): Promise<T>;
    /** Update the properties of a List */
    updateList<T = unknown>(parameters: Parameters.UpdateList, callback: Callback<T>): Promise<void>;
    /** Update the properties of a List */
    updateList<T = unknown>(parameters: Parameters.UpdateList, callback?: never): Promise<T>;
    /** Create a new List on a Board */
    createList<T = Models.List>(parameters: Parameters.CreateList, callback: Callback<T>): Promise<void>;
    /** Create a new List on a Board */
    createList<T = Models.List>(parameters: Parameters.CreateList, callback?: never): Promise<T>;
    /** Archive all cards in a list */
    archiveAllCardsInList<T = unknown>(parameters: Parameters.ArchiveAllCardsInList, callback: Callback<T>): Promise<void>;
    /** Archive all cards in a list */
    archiveAllCardsInList<T = unknown>(parameters: Parameters.ArchiveAllCardsInList, callback?: never): Promise<T>;
    /** Move all Cards in a List */
    moveAllCardsInList<T = unknown>(parameters: Parameters.MoveAllCardsInList, callback: Callback<T>): Promise<void>;
    /** Move all Cards in a List */
    moveAllCardsInList<T = unknown>(parameters: Parameters.MoveAllCardsInList, callback?: never): Promise<T>;
    /** Archive or unarchive a list */
    setListCloseState<T = Models.List>(parameters: Parameters.SetListCloseState, callback: Callback<T>): Promise<void>;
    /** Archive or unarchive a list */
    setListCloseState<T = Models.List>(parameters: Parameters.SetListCloseState, callback?: never): Promise<T>;
    /** Move a List to a different Board */
    moveListToDifferentBoard<T = unknown>(parameters: Parameters.MoveListToDifferentBoard, callback: Callback<T>): Promise<void>;
    /** Move a List to a different Board */
    moveListToDifferentBoard<T = unknown>(parameters: Parameters.MoveListToDifferentBoard, callback?: never): Promise<T>;
    /** Rename a list */
    renameList<T = unknown>(parameters: Parameters.RenameList, callback: Callback<T>): Promise<void>;
    /** Rename a list */
    renameList<T = unknown>(parameters: Parameters.RenameList, callback?: never): Promise<T>;
    /** Get the Actions on a List */
    getListActions<T = unknown>(parameters: Parameters.GetListActions, callback: Callback<T>): Promise<void>;
    /** Get the Actions on a List */
    getListActions<T = unknown>(parameters: Parameters.GetListActions, callback?: never): Promise<T>;
    /** Get the board a list is on */
    getListBoard<T = unknown>(parameters: Parameters.GetListBoard, callback: Callback<T>): Promise<void>;
    /** Get the board a list is on */
    getListBoard<T = unknown>(parameters: Parameters.GetListBoard, callback?: never): Promise<T>;
    /** List the cards in a list */
    getListCards<T = Models.Card[]>(parameters: Parameters.GetListCards, callback: Callback<T>): Promise<void>;
    /** List the cards in a list */
    getListCards<T = Models.Card[]>(parameters: Parameters.GetListCards, callback?: never): Promise<T>;
}
