import * as Models from './models';
import * as Parameters from './parameters';
import { Client } from '../clients';
import { Callback } from '../types';
export declare class Boards {
    private client;
    constructor(client: Client);
    /** Get information about the memberships users have to the board. */
    getBoardMemberships<T = Models.Memberships>(parameters: Parameters.GetBoardMemberships, callback: Callback<T>): Promise<void>;
    /** Get information about the memberships users have to the board. */
    getBoardMemberships<T = Models.Memberships>(parameters: Parameters.GetBoardMemberships, callback?: never): Promise<T>;
    /** Request a single board. */
    getBoard<T = Models.Board>(parameters: Parameters.GetBoard, callback: Callback<T>): Promise<void>;
    /** Request a single board. */
    getBoard<T = Models.Board>(parameters: Parameters.GetBoard, callback?: never): Promise<T>;
    /** Update an existing board by id */
    updateBoard<T = unknown>(parameters: Parameters.UpdateBoard, callback: Callback<T>): Promise<void>;
    /** Update an existing board by id */
    updateBoard<T = unknown>(parameters: Parameters.UpdateBoard, callback?: never): Promise<T>;
    /** Delete a board. */
    deleteBoard<T = void>(parameters: Parameters.DeleteBoard, callback: Callback<T>): Promise<void>;
    /** Delete a board. */
    deleteBoard<T = void>(parameters: Parameters.DeleteBoard, callback?: never): Promise<T>;
    /** Get a single, specific field on a board */
    getBoardField<T = unknown>(parameters: Parameters.GetBoardField, callback: Callback<T>): Promise<void>;
    /** Get a single, specific field on a board */
    getBoardField<T = unknown>(parameters: Parameters.GetBoardField, callback?: never): Promise<T>;
    /** Get an Actions on a Board. */
    getBoardActions<T = unknown>(parameters: Parameters.GetBoardActions, callback: Callback<T>): Promise<void>;
    /** Get an Actions on a Board. */
    getBoardActions<T = unknown>(parameters: Parameters.GetBoardActions, callback?: never): Promise<T>;
    /** Get a single Card on a Board. */
    getBoardCard<T = unknown>(parameters: Parameters.GetBoardCard, callback: Callback<T>): Promise<void>;
    /** Get a single Card on a Board. */
    getBoardCard<T = unknown>(parameters: Parameters.GetBoardCard, callback?: never): Promise<T>;
    /** Get a Stars on a Board. */
    getBoardStars<T = Array<Models.BoardStars>>(parameters: Parameters.GetBoardStars, callback: Callback<T>): Promise<void>;
    /** Get a Stars on a Board. */
    getBoardStars<T = Array<Models.BoardStars>>(parameters: Parameters.GetBoardStars, callback?: never): Promise<T>;
    /** Get all of the checklists on a Board. */
    getBoardChecklists<T = unknown>(parameters: Parameters.GetBoardChecklists, callback: Callback<T>): Promise<void>;
    /** Get all of the checklists on a Board. */
    getBoardChecklists<T = unknown>(parameters: Parameters.GetBoardChecklists, callback?: never): Promise<T>;
    /** Create a new checklist on a board. */
    createBoardChecklist<T = unknown>(parameters: Parameters.CreateBoardChecklist, callback: Callback<T>): Promise<void>;
    /** Create a new checklist on a board. */
    createBoardChecklist<T = unknown>(parameters: Parameters.CreateBoardChecklist, callback?: never): Promise<T>;
    /** Get all of the open Cards on a Board. */
    getBoardCards<T = unknown>(parameters: Parameters.GetBoardCards, callback: Callback<T>): Promise<void>;
    /** Get all of the open Cards on a Board. */
    getBoardCards<T = unknown>(parameters: Parameters.GetBoardCards, callback?: never): Promise<T>;
    /** Get the Cards on a Board that match a given filter. */
    getBoardCardsFilter<T = unknown>(parameters: Parameters.GetBoardCardsFilter, callback: Callback<T>): Promise<void>;
    /** Get the Cards on a Board that match a given filter. */
    getBoardCardsFilter<T = unknown>(parameters: Parameters.GetBoardCardsFilter, callback?: never): Promise<T>;
    /** Get the Custom Field Definitions that exist on a board. */
    getBoardCustomFields<T = Models.CustomField[]>(parameters: Parameters.GetBoardCustomFields, callback: Callback<T>): Promise<void>;
    /** Get the Custom Field Definitions that exist on a board. */
    getBoardCustomFields<T = Models.CustomField[]>(parameters: Parameters.GetBoardCustomFields, callback?: never): Promise<T>;
    /** Get all of the Labels on a Board. */
    getBoardLabels<T = unknown>(parameters: Parameters.GetBoardLabels, callback: Callback<T>): Promise<void>;
    /** Get all of the Labels on a Board. */
    getBoardLabels<T = unknown>(parameters: Parameters.GetBoardLabels, callback?: never): Promise<T>;
    /** Create a new Label on a Board. */
    createBoardLabel<T = unknown>(parameters: Parameters.CreateBoardLabel, callback: Callback<T>): Promise<void>;
    /** Create a new Label on a Board. */
    createBoardLabel<T = unknown>(parameters: Parameters.CreateBoardLabel, callback?: never): Promise<T>;
    /** Get the Lists on a Board */
    getBoardLists<T = Models.List[]>(parameters: Parameters.GetBoardLists, callback: Callback<T>): Promise<void>;
    /** Get the Lists on a Board */
    getBoardLists<T = Models.List[]>(parameters: Parameters.GetBoardLists, callback?: never): Promise<T>;
    /** Create a new List on a Board. */
    createBoardList<T = Models.List>(parameters: Parameters.CreateBoardList, callback: Callback<T>): Promise<void>;
    /** Create a new List on a Board. */
    createBoardList<T = Models.List>(parameters: Parameters.CreateBoardList, callback?: never): Promise<T>;
    getBoardListsFilter<T = unknown>(parameters: Parameters.GetBoardListsFilter, callback: Callback<T>): Promise<void>;
    getBoardListsFilter<T = unknown>(parameters: Parameters.GetBoardListsFilter, callback?: never): Promise<T>;
    /** Get the Members for a board */
    getBoardMembers<T = unknown>(parameters: Parameters.GetBoardMembers, callback: Callback<T>): Promise<void>;
    /** Get the Members for a board */
    getBoardMembers<T = unknown>(parameters: Parameters.GetBoardMembers, callback?: never): Promise<T>;
    /** Invite a Member to a Board via their email address. */
    inviteMember<T = unknown>(parameters: Parameters.InviteMember, callback: Callback<T>): Promise<void>;
    /** Invite a Member to a Board via their email address. */
    inviteMember<T = unknown>(parameters: Parameters.InviteMember, callback?: never): Promise<T>;
    /** Add a member to the board. */
    addMemberToBoard<T = unknown>(parameters: Parameters.AddMemberToBoard, callback: Callback<T>): Promise<void>;
    /** Add a member to the board. */
    addMemberToBoard<T = unknown>(parameters: Parameters.AddMemberToBoard, callback?: never): Promise<T>;
    removeMemberFromBoard<T = unknown>(parameters: Parameters.RemoveMemberFromBoard, callback: Callback<T>): Promise<void>;
    removeMemberFromBoard<T = unknown>(parameters: Parameters.RemoveMemberFromBoard, callback?: never): Promise<T>;
    /** Update an existing board by id */
    updateMemberOnBoard<T = unknown>(parameters: Parameters.UpdateMemberOnBoard, callback: Callback<T>): Promise<void>;
    /** Update an existing board by id */
    updateMemberOnBoard<T = unknown>(parameters: Parameters.UpdateMemberOnBoard, callback?: never): Promise<T>;
    /** Update emailPosition Pref on a Board */
    updateEmailPosition<T = unknown>(parameters: Parameters.UpdateEmailPosition, callback: Callback<T>): Promise<void>;
    /** Update emailPosition Pref on a Board */
    updateEmailPosition<T = unknown>(parameters: Parameters.UpdateEmailPosition, callback?: never): Promise<T>;
    /** Change the default list that email-to-board cards are created in. */
    changeEmailList<T = unknown>(parameters: Parameters.ChangeEmailList, callback: Callback<T>): Promise<void>;
    /** Change the default list that email-to-board cards are created in. */
    changeEmailList<T = unknown>(parameters: Parameters.ChangeEmailList, callback?: never): Promise<T>;
    updateShowListGuide<T = unknown>(parameters: Parameters.UpdateShowListGuide, callback: Callback<T>): Promise<void>;
    updateShowListGuide<T = unknown>(parameters: Parameters.UpdateShowListGuide, callback?: never): Promise<T>;
    updateShowSidebar<T = unknown>(parameters: Parameters.UpdateShowSidebar, callback: Callback<T>): Promise<void>;
    updateShowSidebar<T = unknown>(parameters: Parameters.UpdateShowSidebar, callback?: never): Promise<T>;
    updateShowSidebarActivity<T = unknown>(parameters: Parameters.UpdateShowSidebarActivity, callback: Callback<T>): Promise<void>;
    updateShowSidebarActivity<T = unknown>(parameters: Parameters.UpdateShowSidebarActivity, callback?: never): Promise<T>;
    updateShowSidebarBoardActions<T = unknown>(parameters: Parameters.UpdateShowSidebarBoardActions, callback: Callback<T>): Promise<void>;
    updateShowSidebarBoardActions<T = unknown>(parameters: Parameters.UpdateShowSidebarBoardActions, callback?: never): Promise<T>;
    updateShowSidebarMembers<T = unknown>(parameters: Parameters.UpdateShowSidebarMembers, callback: Callback<T>): Promise<void>;
    updateShowSidebarMembers<T = unknown>(parameters: Parameters.UpdateShowSidebarMembers, callback?: never): Promise<T>;
    /** Create a new board. */
    createBoard<T = Models.Board>(parameters: Parameters.CreateBoard, callback: Callback<T>): Promise<void>;
    /** Create a new board. */
    createBoard<T = Models.Board>(parameters: Parameters.CreateBoard, callback?: never): Promise<T>;
    /** Create a new board. */
    createCalendarKey<T = unknown>(parameters: Parameters.CreateCalendarKey, callback: Callback<T>): Promise<void>;
    /** Create a new board. */
    createCalendarKey<T = unknown>(parameters: Parameters.CreateCalendarKey, callback?: never): Promise<T>;
    createEmailKey<T = unknown>(parameters: Parameters.CreateEmailKey, callback: Callback<T>): Promise<void>;
    createEmailKey<T = unknown>(parameters: Parameters.CreateEmailKey, callback?: never): Promise<T>;
    createIdTags<T = unknown>(parameters: Parameters.CreateIdTags, callback: Callback<T>): Promise<void>;
    createIdTags<T = unknown>(parameters: Parameters.CreateIdTags, callback?: never): Promise<T>;
    markAsViewed<T = unknown>(parameters: Parameters.MarkAsViewed, callback: Callback<T>): Promise<void>;
    markAsViewed<T = unknown>(parameters: Parameters.MarkAsViewed, callback?: never): Promise<T>;
    /** @deprecated Was removed from API */
    createPowerUp<T = unknown>(parameters: Parameters.CreatePowerUp, callback: Callback<T>): Promise<void>;
    /** @deprecated Was removed from API */
    createPowerUp<T = unknown>(parameters: Parameters.CreatePowerUp, callback?: never): Promise<T>;
    /** @deprecated Was removed from API */
    deletePowerUp<T = unknown>(parameters: Parameters.DeletePowerUp, callback: Callback<T>): Promise<void>;
    /** @deprecated Was removed from API */
    deletePowerUp<T = unknown>(parameters: Parameters.DeletePowerUp, callback?: never): Promise<T>;
    /**
     * @deprecated Will be removed from API
     *
     *   Get the enabled Power-Ups on a board
     */
    getEnabledPowerUps<T = Models.Plugin[]>(parameters: Parameters.GetEnabledPowerUps, callback: Callback<T>): Promise<void>;
    /**
     * @deprecated Will be removed from API
     *
     *   Get the enabled Power-Ups on a board
     */
    getEnabledPowerUps<T = Models.Plugin[]>(parameters: Parameters.GetEnabledPowerUps, callback?: never): Promise<T>;
    /**
     * @deprecated Will be removed from API
     *
     *   Enable a Power-Up on a Board
     */
    enablePowerUp<T = unknown>(parameters: Parameters.EnablePowerUp, callback: Callback<T>): Promise<void>;
    /** Enable a Power-Up on a Board */
    enablePowerUp<T = unknown>(parameters: Parameters.EnablePowerUp, callback?: never): Promise<T>;
    /**
     * @deprecated Will be removed from API
     *
     *   Disable a Power-Up on a board
     */
    disablePowerUp<T = unknown>(parameters: Parameters.DisablePowerUp, callback: Callback<T>): Promise<void>;
    /** Disable a Power-Up on a board */
    disablePowerUp<T = unknown>(parameters: Parameters.DisablePowerUp, callback?: never): Promise<T>;
    /**
     * @deprecated Will be removed from API
     *
     *   List the Power-Ups on a board
     */
    getPowerUps<T = Models.Plugin>(parameters: Parameters.GetPowerUps, callback: Callback<T>): Promise<void>;
    /**
     * @deprecated Will be removed from API
     *
     *   List the Power-Ups on a board
     */
    getPowerUps<T = Models.Plugin>(parameters: Parameters.GetPowerUps, callback?: never): Promise<T>;
}
