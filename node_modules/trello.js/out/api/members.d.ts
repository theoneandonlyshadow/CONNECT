import * as Models from './models';
import * as Parameters from './parameters';
import { Client } from '../clients';
import { Callback } from '../types';
export declare class Members {
    private client;
    constructor(client: Client);
    /** Get a member */
    getMember<T = Models.Member>(parameters: Parameters.GetMember, callback: Callback<T>): Promise<void>;
    /** Get a member */
    getMember<T = Models.Member>(parameters: Parameters.GetMember, callback?: never): Promise<T>;
    /** Update a Member */
    updateMember<T = unknown>(parameters: Parameters.UpdateMember, callback: Callback<T>): Promise<void>;
    /** Update a Member */
    updateMember<T = unknown>(parameters: Parameters.UpdateMember, callback?: never): Promise<T>;
    /** Get a particular property of a member */
    getMemberField<T = unknown>(parameters: Parameters.GetMemberField, callback: Callback<T>): Promise<void>;
    /** Get a particular property of a member */
    getMemberField<T = unknown>(parameters: Parameters.GetMemberField, callback?: never): Promise<T>;
    /** List the actions for a member */
    getMemberActions<T = Array<Models.Member>>(parameters: Parameters.GetMemberActions, callback: Callback<T>): Promise<void>;
    /** List the actions for a member */
    getMemberActions<T = Array<Models.Member>>(parameters: Parameters.GetMemberActions, callback?: never): Promise<T>;
    /** Get a member's custom board backgrounds */
    getMemberBoardBackgrounds<T = Array<Models.BoardBackground>>(parameters: Parameters.GetMemberBoardBackgrounds, callback: Callback<T>): Promise<void>;
    /** Get a member's custom board backgrounds */
    getMemberBoardBackgrounds<T = Array<Models.BoardBackground>>(parameters: Parameters.GetMemberBoardBackgrounds, callback?: never): Promise<T>;
    /** Upload a new boardBackground */
    uploadMemberBoardBackground<T = Array<Models.BoardBackground>>(parameters: Parameters.UploadMemberBoardBackground, callback: Callback<T>): Promise<void>;
    /** Upload a new boardBackground */
    uploadMemberBoardBackground<T = Array<Models.BoardBackground>>(parameters: Parameters.UploadMemberBoardBackground, callback?: never): Promise<T>;
    /** Get a member's board background */
    getMemberBoardBackground<T = Models.BoardBackground>(parameters: Parameters.GetMemberBoardBackground, callback: Callback<T>): Promise<void>;
    /** Get a member's board background */
    getMemberBoardBackground<T = Models.BoardBackground>(parameters: Parameters.GetMemberBoardBackground, callback?: never): Promise<T>;
    /** Update a board background */
    updateBoardBackground<T = Models.BoardBackground>(parameters: Parameters.UpdateBoardBackground, callback: Callback<T>): Promise<void>;
    /** Update a board background */
    updateBoardBackground<T = Models.BoardBackground>(parameters: Parameters.UpdateBoardBackground, callback?: never): Promise<T>;
    /** Delete a board background */
    deleteMemberBoardBackground<T = unknown>(parameters: Parameters.DeleteMemberBoardBackgroud, callback: Callback<T>): Promise<void>;
    /** Delete a board background */
    deleteMemberBoardBackground<T = unknown>(parameters: Parameters.DeleteMemberBoardBackgroud, callback?: never): Promise<T>;
    /** List a member's board stars */
    getMemberBoardStars<T = unknown>(parameters: Parameters.GetMemberBoardStars, callback: Callback<T>): Promise<void>;
    /** List a member's board stars */
    getMemberBoardStars<T = unknown>(parameters: Parameters.GetMemberBoardStars, callback?: never): Promise<T>;
    /** Star a new board on behalf of a Member */
    starMemberBoard<T = Models.BoardStars[]>(parameters: Parameters.StarMemberBoard, callback: Callback<T>): Promise<void>;
    /** Star a new board on behalf of a Member */
    starMemberBoard<T = Models.BoardStars[]>(parameters: Parameters.StarMemberBoard, callback?: never): Promise<T>;
    /** Get a specific boardStar */
    getMemberBoardStar<T = Models.BoardStars>(parameters: Parameters.GetMemberBoardStar, callback: Callback<T>): Promise<void>;
    /** Get a specific boardStar */
    getMemberBoardStar<T = Models.BoardStars>(parameters: Parameters.GetMemberBoardStar, callback?: never): Promise<T>;
    /** Update the position of a starred board */
    updateMemberBoardStar<T = unknown>(parameters: Parameters.UpdateMemberBoardStar, callback: Callback<T>): Promise<void>;
    /** Update the position of a starred board */
    updateMemberBoardStar<T = unknown>(parameters: Parameters.UpdateMemberBoardStar, callback?: never): Promise<T>;
    /** Unstar a board */
    unstarMemberBoard<T = unknown>(parameters: Parameters.UnstarMemberBoard, callback: Callback<T>): Promise<void>;
    /** Unstar a board */
    unstarMemberBoard<T = unknown>(parameters: Parameters.UnstarMemberBoard, callback?: never): Promise<T>;
    /** Lists the boards that the user is a member of. */
    getMemberBoards<T = Models.Board[]>(parameters: Parameters.GetMemberBoards, callback: Callback<T>): Promise<void>;
    /** Lists the boards that the user is a member of. */
    getMemberBoards<T = Models.Board[]>(parameters: Parameters.GetMemberBoards, callback?: never): Promise<T>;
    /** Get the boards the member has been invited to */
    getMemberBoardsInvited<T = Models.Board[]>(parameters: Parameters.GetMemberBoardsInvited, callback: Callback<T>): Promise<void>;
    /** Get the boards the member has been invited to */
    getMemberBoardsInvited<T = Models.Board[]>(parameters: Parameters.GetMemberBoardsInvited, callback?: never): Promise<T>;
    /** Gets the cards a member is on */
    getMemberCards<T = Models.Card[]>(parameters: Parameters.GetMemberCards, callback: Callback<T>): Promise<void>;
    /** Gets the cards a member is on */
    getMemberCards<T = Models.Card[]>(parameters: Parameters.GetMemberCards, callback?: never): Promise<T>;
    /** Get a member's custom board backgrounds */
    getMemberCustomBoardBackgrounds<T = Models.BoardBackground[]>(parameters: Parameters.GetMemberCustomBoardBackgrounds, callback: Callback<T>): Promise<void>;
    /** Get a member's custom board backgrounds */
    getMemberCustomBoardBackgrounds<T = Models.BoardBackground[]>(parameters: Parameters.GetMemberCustomBoardBackgrounds, callback?: never): Promise<T>;
    /** Upload a new custom board background */
    uploadMemberCustomBoardBackground<T = Models.BoardBackground>(parameters: Parameters.UploadMemberCustomBoardBackground, callback: Callback<T>): Promise<void>;
    /** Upload a new custom board background */
    uploadMemberCustomBoardBackground<T = Models.BoardBackground>(parameters: Parameters.UploadMemberCustomBoardBackground, callback?: never): Promise<T>;
    /** Get a specific custom board background */
    getMemberCustomBoardBackground<T = Models.BoardBackground>(parameters: Parameters.GetMemberCustomBoardBackground, callback: Callback<T>): Promise<void>;
    /** Get a specific custom board background */
    getMemberCustomBoardBackground<T = Models.BoardBackground>(parameters: Parameters.GetMemberCustomBoardBackground, callback?: never): Promise<T>;
    /** Update a specific custom board background */
    updateMemberCustomBoardBackground<T = Models.BoardBackground>(parameters: Parameters.UpdateMemberCustomBoardBackground, callback: Callback<T>): Promise<void>;
    /** Update a specific custom board background */
    updateMemberCustomBoardBackground<T = Models.BoardBackground>(parameters: Parameters.UpdateMemberCustomBoardBackground, callback?: never): Promise<T>;
    /** Delete a specific custom board background */
    deleteMemberCustomBoardBackground<T = unknown>(parameters: Parameters.DeleteMemberCustomBoardBackground, callback: Callback<T>): Promise<void>;
    /** Delete a specific custom board background */
    deleteMemberCustomBoardBackground<T = unknown>(parameters: Parameters.DeleteMemberCustomBoardBackground, callback?: never): Promise<T>;
    /** Get a Member's uploaded custom Emojis */
    getMemberCustomEmojis<T = Models.CustomEmoji[]>(parameters: Parameters.GetMemberCustomEmojis, callback: Callback<T>): Promise<void>;
    /** Get a Member's uploaded custom Emojis */
    getMemberCustomEmojis<T = Models.CustomEmoji[]>(parameters: Parameters.GetMemberCustomEmojis, callback?: never): Promise<T>;
    /** Create a new custom Emoji */
    createMemberCustomEmoji<T = Models.CustomEmoji>(parameters: Parameters.CreateMemberCustomEmoji, callback: Callback<T>): Promise<void>;
    /** Create a new custom Emoji */
    createMemberCustomEmoji<T = Models.CustomEmoji>(parameters: Parameters.CreateMemberCustomEmoji, callback?: never): Promise<T>;
    /** Get a Member's custom Emoji */
    getMemberCustomEmoji<T = Models.CustomEmoji>(parameters: Parameters.GetMemberCustomEmoji, callback: Callback<T>): Promise<void>;
    /** Get a Member's custom Emoji */
    getMemberCustomEmoji<T = Models.CustomEmoji>(parameters: Parameters.GetMemberCustomEmoji, callback?: never): Promise<T>;
    /** Get a Member's uploaded stickers */
    getMemberCustomStickers<T = Models.CustomSticker[]>(parameters: Parameters.GetMemberCustomStickers, callback: Callback<T>): Promise<void>;
    /** Get a Member's uploaded stickers */
    getMemberCustomStickers<T = Models.CustomSticker[]>(parameters: Parameters.GetMemberCustomStickers, callback?: never): Promise<T>;
    /** Upload a new custom sticker */
    uploadMemberCustomSticker<T = Models.CustomSticker>(parameters: Parameters.UploadMemberCustomSticker, callback: Callback<T>): Promise<void>;
    /** Upload a new custom sticker */
    uploadMemberCustomSticker<T = Models.CustomSticker>(parameters: Parameters.UploadMemberCustomSticker, callback?: never): Promise<T>;
    /** Get a Member's custom Sticker */
    getMemberCustomSticker<T = Models.CustomSticker>(parameters: Parameters.GetMemberCustomSticker, callback: Callback<T>): Promise<void>;
    /** Get a Member's custom Sticker */
    getMemberCustomSticker<T = Models.CustomSticker>(parameters: Parameters.GetMemberCustomSticker, callback?: never): Promise<T>;
    /** Delete a Member's custom Sticker */
    deleteMemberCustomSticker<T = unknown>(parameters: Parameters.DeleteMemberCustomSticker, callback: Callback<T>): Promise<void>;
    /** Delete a Member's custom Sticker */
    deleteMemberCustomSticker<T = unknown>(parameters: Parameters.DeleteMemberCustomSticker, callback?: never): Promise<T>;
    /** Get a member's notifications */
    getMemberNotifications<T = Models.Notification[]>(parameters: Parameters.GetMemberNotifications, callback: Callback<T>): Promise<void>;
    /** Get a member's notifications */
    getMemberNotifications<T = Models.Notification[]>(parameters: Parameters.GetMemberNotifications, callback?: never): Promise<T>;
    /** Get a member's Workspaces */
    getMemberOrganizations<T = Models.Organization[]>(parameters: Parameters.GetMemberOrganizations, callback: Callback<T>): Promise<void>;
    /** Get a member's Workspaces */
    getMemberOrganizations<T = Models.Organization[]>(parameters: Parameters.GetMemberOrganizations, callback?: never): Promise<T>;
    /** Get a member's Workspaces they have been invited to */
    getMemberOrganizationsInvited<T = Models.Organization[]>(parameters: Parameters.GetMemberOrganizationsInvited, callback: Callback<T>): Promise<void>;
    /** Get a member's Workspaces they have been invited to */
    getMemberOrganizationsInvited<T = Models.Organization[]>(parameters: Parameters.GetMemberOrganizationsInvited, callback?: never): Promise<T>;
    /** List the saved searches of a Member */
    getMemberSavedSearches<T = Models.SavedSearch[]>(parameters: Parameters.GetMemberSavedSearches, callback: Callback<T>): Promise<void>;
    /** List the saved searches of a Member */
    getMemberSavedSearches<T = Models.SavedSearch[]>(parameters: Parameters.GetMemberSavedSearches, callback?: never): Promise<T>;
    /** Create a saved search */
    createMemberSavedSearch<T = Models.SavedSearch>(parameters: Parameters.CreateMemberSavedSearch, callback: Callback<T>): Promise<void>;
    /** Create a saved search */
    createMemberSavedSearch<T = Models.SavedSearch>(parameters: Parameters.CreateMemberSavedSearch, callback?: never): Promise<T>;
    /** Get a saved search */
    getMemberSavedSearch<T = Models.SavedSearch>(parameters: Parameters.GetMemberSavedSearch, callback: Callback<T>): Promise<void>;
    /** Get a saved search */
    getMemberSavedSearch<T = Models.SavedSearch>(parameters: Parameters.GetMemberSavedSearch, callback?: never): Promise<T>;
    /** Update a saved search */
    updateMemberSavedSearch<T = Models.SavedSearch>(parameters: Parameters.UpdateMemberSavedSerch, callback: Callback<T>): Promise<void>;
    /** Update a saved search */
    updateMemberSavedSearch<T = Models.SavedSearch>(parameters: Parameters.UpdateMemberSavedSerch, callback?: never): Promise<T>;
    /** Delete a saved search */
    deleteMemberSavedSearch<T = unknown>(parameters: Parameters.DeleteMemberSavedSearch, callback: Callback<T>): Promise<void>;
    /** Delete a saved search */
    deleteMemberSavedSearch<T = unknown>(parameters: Parameters.DeleteMemberSavedSearch, callback?: never): Promise<T>;
    /** List a members app tokens */
    getMemberTokens<T = Models.Token[]>(parameters: Parameters.GetMemberTokens, callback: Callback<T>): Promise<void>;
    /** List a members app tokens */
    getMemberTokens<T = Models.Token[]>(parameters: Parameters.GetMemberTokens, callback?: never): Promise<T>;
    /** Create a new avatar for a member */
    createMemberAvatar<T = unknown>(parameters: Parameters.CreateMemberAvatar, callback: Callback<T>): Promise<void>;
    /** Create a new avatar for a member */
    createMemberAvatar<T = unknown>(parameters: Parameters.CreateMemberAvatar, callback?: never): Promise<T>;
    /** Dismiss a message */
    dismissMemberMessage<T = unknown>(parameters: Parameters.DismissMemberMessage, callback: Callback<T>): Promise<void>;
    /** Dismiss a message */
    dismissMemberMessage<T = unknown>(parameters: Parameters.DismissMemberMessage, callback?: never): Promise<T>;
}
