import * as Models from './models';
import * as Parameters from './parameters';
import { Client } from '../clients';
import { Callback } from '../types';
export declare class Enterprises {
    private client;
    constructor(client: Client);
    /** Get an enterprise by its ID. */
    getEnterprise<T = Models.Enterprise>(parameters: Parameters.GetEnterprise, callback: Callback<T>): Promise<void>;
    /** Get an enterprise by its ID. */
    getEnterprise<T = Models.Enterprise>(parameters: Parameters.GetEnterprise, callback?: never): Promise<T>;
    /**
     * Returns an array of Actions related to the Enterprise object. Used for populating data sent to Google Sheets from
     * an Enterprise's audit log page: https://trello.com/e/{enterprise_name}/admin/auditlog. An Enterprise admin token is
     * required for this route.
     */
    getEnterpriseAuditLog<T = Models.EnterpriseAuditLog[]>(parameters: Parameters.GetEnterpriseAuditLog, callback?: Callback<T>): Promise<void>;
    /**
     * Returns an array of Actions related to the Enterprise object. Used for populating data sent to Google Sheets from
     * an Enterprise's audit log page: https://trello.com/e/{enterprise_name}/admin/auditlog. An Enterprise admin token is
     * required for this route.
     */
    getEnterpriseAuditLog<T = Models.EnterpriseAuditLog[]>(parameters: Parameters.GetEnterpriseAuditLog, callback?: never): Promise<T>;
    /** Get an enterprise's admin members. */
    getEnterpriseAdmins<T = Models.EnterpriseAdmin>(parameters: Parameters.GetEnterpriseAdmins, callback: Callback<T>): Promise<void>;
    /** Get an enterprise's admin members. */
    getEnterpriseAdmins<T = Models.EnterpriseAdmin>(parameters: Parameters.GetEnterpriseAdmins, callback?: never): Promise<T>;
    /** Get the signup URL for an enterprise. */
    getEnterpriseSignupUrl<T = Models.GetEnterprisesIdSignupUrl>(parameters: Parameters.GetEnterpriseSignupUrl, callback: Callback<T>): Promise<void>;
    /** Get the signup URL for an enterprise. */
    getEnterpriseSignupUrl<T = Models.GetEnterprisesIdSignupUrl>(parameters: Parameters.GetEnterpriseSignupUrl, callback?: never): Promise<T>;
    /** Get the members of an enterprise. */
    getEnterpriseMembers<T = Models.Member[]>(parameters: Parameters.GetEnterpriseMembers, callback: Callback<T>): Promise<void>;
    /** Get the members of an enterprise. */
    getEnterpriseMembers<T = Models.Member[]>(parameters: Parameters.GetEnterpriseMembers, callback?: never): Promise<T>;
    /** Get a specific member of an enterprise by ID. */
    getEnterpriseMember<T = Models.Member>(parameters: Parameters.GetEnterpriseMember, callback: Callback<T>): Promise<void>;
    /** Get a specific member of an enterprise by ID. */
    getEnterpriseMember<T = Models.Member>(parameters: Parameters.GetEnterpriseMember, callback?: never): Promise<T>;
    /** Get whether an organization can be transferred to an enterprise. */
    getEnterpriseTransferrableOrganization<T = Models.TransferrableOrganization>(parameters: Parameters.GetEnterpriseTransferrableOrganization, callback: Callback<T>): Promise<void>;
    /** Get whether an organization can be transferred to an enterprise. */
    getEnterpriseTransferrableOrganization<T = Models.TransferrableOrganization>(parameters: Parameters.GetEnterpriseTransferrableOrganization, callback?: never): Promise<T>;
    /** Get the Workspaces that are claimable by the enterprise by ID. */
    getEnterprisesIdClaimableOrganizations<T = Models.ClaimableOrganizations>(parameters: Parameters.GetEnterprisesIdClaimableOrganizations, callback: Callback<T>): Promise<void>;
    /** Get the Workspaces that are claimable by the enterprise by ID. */
    getEnterprisesIdClaimableOrganizations<T = Models.ClaimableOrganizations>(parameters: Parameters.GetEnterprisesIdClaimableOrganizations, callback?: never): Promise<T>;
    /** Get the Workspaces that are pending for the enterprise by ID. */
    getEnterprisesIdPendingOrganizations<T = Models.PendingOrganizations[]>(parameters: Parameters.GetEnterprisesIdPendingOrganizations, callback: Callback<T>): Promise<void>;
    /** Get the Workspaces that are pending for the enterprise by ID. */
    getEnterprisesIdPendingOrganizations<T = Models.PendingOrganizations[]>(parameters: Parameters.GetEnterprisesIdPendingOrganizations, callback?: never): Promise<T>;
    /** Create an auth Token for an Enterprise. */
    createEnterpriseToken<T = unknown>(parameters: Parameters.CreateEnterpriseToken, callback: Callback<T>): Promise<void>;
    /** Create an auth Token for an Enterprise. */
    createEnterpriseToken<T = unknown>(parameters: Parameters.CreateEnterpriseToken, callback?: never): Promise<T>;
    /** Transfer an organization to an enterprise. */
    transferOrganizationToEnterprise<T = Array<Models.Organization>>(parameters: Parameters.TransferOrganizationToEnterprise, callback: Callback<T>): Promise<void>;
    /** Transfer an organization to an enterprise. */
    transferOrganizationToEnterprise<T = Array<Models.Organization>>(parameters: Parameters.TransferOrganizationToEnterprise, callback?: never): Promise<T>;
    /** This endpoint is used to update whether the provided Member should use one of the Enterprise's available licenses or not. */
    updateEnterpriseMemberLicense<T = Models.Member>(parameters: Parameters.UpdateEnterpriseMemberLicense, callback: Callback<T>): Promise<void>;
    /** This endpoint is used to update whether the provided Member should use one of the Enterprise's available licenses or not. */
    updateEnterpriseMemberLicense<T = Models.Member>(parameters: Parameters.UpdateEnterpriseMemberLicense, callback?: never): Promise<T>;
    /** Deactivate a Member of an Enterprise. */
    deactivateEnterpriseMember<T = unknown>(parameters: Parameters.DeactivateEnterpriseMember, callback: Callback<T>): Promise<void>;
    /** Deactivate a Member of an Enterprise. */
    deactivateEnterpriseMember<T = unknown>(parameters: Parameters.DeactivateEnterpriseMember, callback?: never): Promise<T>;
    /** Make Member an admin of Enterprise. */
    makeEnterpriseMemberAdmin<T = unknown>(parameters: Parameters.MakeEnterpriseMemberAdmin, callback: Callback<T>): Promise<void>;
    /** Make Member an admin of Enterprise. */
    makeEnterpriseMemberAdmin<T = unknown>(parameters: Parameters.MakeEnterpriseMemberAdmin, callback?: never): Promise<T>;
    /** Remove a member as admin from an enterprise. */
    deleteEnterpriseMemberAdmin<T = unknown>(parameters: Parameters.DeleteEnterpriseMemberAdmin, callback: Callback<T>): Promise<void>;
    /** Remove a member as admin from an enterprise. */
    deleteEnterpriseMemberAdmin<T = unknown>(parameters: Parameters.DeleteEnterpriseMemberAdmin, callback?: never): Promise<T>;
    /** Remove an organization from an enterprise. */
    deleteEnterpriseOrganization<T = unknown>(parameters: Parameters.DeleteEnterpriseOrganization, callback: Callback<T>): Promise<void>;
    /** Remove an organization from an enterprise. */
    deleteEnterpriseOrganization<T = unknown>(parameters: Parameters.DeleteEnterpriseOrganization, callback?: never): Promise<T>;
}
