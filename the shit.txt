    const ip = socket.handshake.headers['x-forwarded-for'] || socket.conn.remoteAddress.split(":")[3];

// Run when client connects
io.on("connection", (socket) => {
  socket.on("joinRoom", ({ username, room }) => {
    const user = userJoin(socket.id, username, room);

    socket.join(user.room);

    // Welcome current user
    socket.emit("message", formatMessage(botName, "Welcome to Connect!"));

    // Broadcast when a user connects
    socket.broadcast
      .to(user.room)
      .emit(
        "message",
        formatMessage(botName, `${user.username} has joined the chat`)
      );

    // Send users and room info
    io.to(user.room).emit("roomUsers", {
      room: user.room,
      users: getRoomUsers(user.room),
    });
  });

  // Listen for chatMessage

// Modify socket.emit for file upload
socket.on("chatMessage", (message) => {
  const user = getCurrentUser(socket.id);

  if (message.text) {
    io.to(user.room).emit("message", formatMessage(user.username, message.text));
  }

  if (message.downloadLink && message.filename) {
    // Emit a separate message for the file
    io.to(user.room).emit("fileMessage", {
      username: user.username,
      downloadLink: message.downloadLink,
      filename: message.filename
    });
    io.to(user.room).emit("message", formatMessage(user.username, message.text, message.downloadLink, message.filename ));
  }
  
});

  -
  socket.on("chatMessage", (msg) => {
    const user = getCurrentUser(socket.id);

    io.to(user.room).emit("message", formatMessage(user.username, msg));
  });

  // Runs when client disconnects
  socket.on("disconnect", () => {
    const user = userLeave(socket.id);

    if (user) {
      io.to(user.room).emit(
        "message",
        formatMessage(botName, `${user.username} has left the chat`)
      );

      // Send users and room info
      io.to(user.room).emit("roomUsers", {
        room: user.room,
        users: getRoomUsers(user.room),
      });
    }
  });
});